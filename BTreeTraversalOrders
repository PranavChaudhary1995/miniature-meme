import java.util.ArrayList;
public class Main{
    static ArrayList<Integer> result = new ArrayList<Integer>();
    private static class TreeNode{
        int value;
        TreeNode left;
        TreeNode right;
        TreeNode(int value){
            this.value=value;
        }
    }
    public static void main(String[] args){
        TreeNode root = new TreeNode(40);
        TreeNode node20 = new TreeNode(20);
        TreeNode node60 = new TreeNode(60);
        TreeNode node10 = new TreeNode(10);
        TreeNode node30 = new TreeNode(30);
        TreeNode node50 = new TreeNode(50);
        TreeNode node70 = new TreeNode(70);
        root.left = node20;
        root.right = node60;
        node20.left = node10;
        node20.right = node30;
        node60.left = node50;
        node60.right = node70;
        preOrderTraversal(root);
        System.out.println(result);
    }
    public static void dfsIn(TreeNode node){
        if(node==null){
            return;
        }
        TreeNode leftSubTree = node.left;
        TreeNode rightSubTree = node.right;
        dfsIn(leftSubTree);
        result.add(node.value);
        dfsIn(rightSubTree);
    }
    public static void preOrderTraversal(TreeNode node){
        if(node==null){
            return;
        }
        TreeNode leftSubTree = node.left;
        TreeNode rightSubTree = node.right;
        result.add(node.value);
        preOrderTraversal(leftSubTree);
        preOrderTraversal(rightSubTree);
    }

    public static void postOrderTraversal(TreeNode node){
        if(node==null){
            return;
        }
        TreeNode leftSubTree = node.left;
        TreeNode rightSubTree = node.right;
        result.add(node.value);
        preOrderTraversal(leftSubTree);
        preOrderTraversal(rightSubTree);
    }
}
